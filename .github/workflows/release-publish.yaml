name: 🏷️ Release | Publish

on:
  release:
    types: 
      - published

env:
  REGISTRY: ${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  tag-latest:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution:
          - nrdot-collector-host
          - nrdot-collector-k8s

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.OTELCOMM_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.OTELCOMM_DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.OTELCOMM_AWS_TEST_ACC_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCOUNT_ID }}:role/resource-provisioner
          role-skip-session-tagging: true

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY}}/${{ matrix.distribution }}

      - name: Copy Docker Manifest from ECR to Docker Hub
        run: |
          version="${{ github.event.release.tag_name }}"
          image_name="${{ env.REGISTRY }}/${{ matrix.distribution }}"

          if [ -z "$version" ]; then
            echo "Error: version is empty"
            exit 1
          fi

          if ! docker manifest inspect "${image_name}:${version}" > /dev/null 2>&1; then
            echo "Error: Docker manifest for ${image_name}:${version} does not exist"
            exit 1
          fi

          docker buildx imagetools create \
            --tag "newrelic/${{ matrix.distribution }}:${version}" \
            --tag "newrelic/${{ matrix.distribution }}:latest" \
            "${image_name}:${version}"

  create-docs-pr:
    name: Create PR with Release Notes
    runs-on: ubuntu-latest
    if: ${{ !github.event.release.prerelease && !github.event.release.draft }}
    steps:
      - name: Sync Fork
        run: |
          gh repo sync otelcomm-bot/docs-website -b develop --force --source newrelic/docs-website
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: otelcomm-bot/docs-website
          token: ${{ secrets.RELEASE_TOKEN }}
          path: docs-website
          fetch-depth: 1
          ref: develop
          sparse-checkout: src/content/docs/release-notes

      - name: Setup ENV
        run: |
          version="${{ github.event.release.tag_name }}"
          release_date=$(date -u -d "${{ github.event.release.published_at }}" +"%Y-%m-%d")
          echo "release_date=${release_date}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_ENV
          echo "branch=nrdot-release-notes-${version}-${release_date}" >> $GITHUB_ENV

      - name: Commit Release Notes
        run: |
          cd docs-website/src/content/docs/release-notes
          git switch -c ${{ env.branch }}
         
          release_notes_file="nrdot-release-notes/nrdot-${{ env.release_date }}.mdx"

          echo "---" > $release_notes_file
          echo "subject: NRDOT" >> $release_notes_file
          echo "releaseDate: '${{ env.release_date }}'" >> $release_notes_file
          echo "version: ${{ env.version }}" >> $release_notes_file
          echo "metaDescription: Release notes for NRDOT Collector version ${{ env.version }}" >> $release_notes_file
          echo "---" >> $release_notes_file
          echo "" >> $release_notes_file
          echo "${{ github.event.release.body }}" >> $release_notes_file

          echo "Release notes file created at ${release_notes_file} with:"
          cat $release_notes_file

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add $release_notes_file
          git commit -m "feat: Add release notes for NRDOT ${{ env.version }}"
          git push origin ${{ env.branch }}
      
      - name: Issue PR
        if: ${{ !env.ACT }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          gh pr create --title "Add release notes for NRDOT ${{ env.version }}" \
           --body "Add release notes for NRDOT ${{ env.version }}\n\n Note: PR is auto-generated. If anything looks off, please contact the maintainers of ${{ github.event.repository.name }}." \
           --repo newrelic/docs-website \
           --base develop --head ${{ env.branch }}
