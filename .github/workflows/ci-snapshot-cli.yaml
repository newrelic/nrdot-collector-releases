name: ðŸ§© CI Snapshot CLI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for tag metadata
          sparse-checkout: cmd/nrdot-collector-builder

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          check-latest: true

      - name: Tidy go.mod files
        run: go mod tidy

      - name: Run tests
        run: |
          set +e
          go test ./...
          echo "Ignoring test failures for CI build preview."
        working-directory: cmd/nrdot-collector-builder

      - name: Login to Docker
        uses: docker/login-action@v3
        if: ${{ env.ACT }}
        with:
          registry: docker.io
          username: ${{ secrets.OTELCOMM_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.OTELCOMM_DOCKER_HUB_PASSWORD }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Publish alpha with GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: --snapshot --clean
          workdir: cmd/nrdot-collector-builder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry for manifests
        uses: docker/login-action@v3
        if: ${{ !env.ACT }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and Publish Docker Manifests
        shell: bash
        if: ${{ !env.ACT && (github.ref_name == 'main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract Docker image names and digests
          DOCKER_IMAGES=$(echo '${{ steps.goreleaser.outputs.artifacts }}' | jq -r '.[] | select(.type=="Docker Image")')

          # Create temporary files to store grouped data
          mkdir -p ${{ runner.temp }}/manifest_groups
          rm -f ${{ runner.temp }}/manifest_groups/*

          # Convert to an array of objects for iteration
          echo "$DOCKER_IMAGES" | jq -c '.' | while read -r image_object; do
            # Extract image name and architecture
            name=$(echo "$image_object" | jq -r '.name')
            goarch=$(echo "$image_object" | jq -r '.goarch')
            
            # Extract the base name and tag
            base_name=$(echo "$name" | cut -d ':' -f 1)
            tag=$(echo "$name" | cut -d ':' -f 2)
            
            # Extract base tag (without architecture suffix)
            base_tag=$(echo "$tag" | cut -d '-' -f 1)
            
            echo "Processing image: $name (arch: $goarch)"
            echo "  Base name: $base_name"
            echo "  Base tag: $base_tag"
            
            # Use files to store the grouped data
            # Create a file named after the base_tag and append the image name to it
            echo "$name" >> "${{ runner.temp }}/manifest_groups/$base_tag"
          done

          # Now create manifests for each group
          echo "Creating Docker manifests..."
          for group_file in ${{ runner.temp }}/manifest_groups/*; do
            # Extract base_tag from filename
            base_tag=$(basename "$group_file")
            
            # Read all images for this tag
            images=$(cat "$group_file" | tr '\n' ' ')
            
            # Get base name from the first image
            first_image=$(echo "$images" | awk '{print $1}')
            base_name=$(echo "$first_image" | cut -d ':' -f 1)
            
            # Create manifest name (base name + base tag without arch)
            manifest_name="${base_name}:${base_tag}"
            
            echo "Creating manifest: $manifest_name"
            echo "  With images: $images"
            
            # Create and push the manifest
            # Uncomment these lines when you're ready to execute them
            docker manifest create "$manifest_name" $images
            docker manifest push "$manifest_name"
          done

          # Clean up temporary files
          rm -rf ${{ runner.temp }}/manifest_groups

