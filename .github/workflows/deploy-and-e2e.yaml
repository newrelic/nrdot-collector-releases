name: ♻️ Deploy & E2E Tests

on:
  workflow_call:
    inputs:
      ref:
        description: "Git ref (commit SHA, tag, or branch) to use for artifact retrieval"
        type: string
        required: false
        default: ""
      workspace_prefix:
        description: "Optional prefix for generated workspace (e.g. 'nightly'). If empty, generation uses ref only."
        type: string
        required: false
        default: ""
      distro:
        description: "Distribution under test (e.g. nrdot-collector-host)"
        type: string
        required: true
      fips:
        description: "Run in FIPS mode"
        type: boolean
        required: false
        default: false
      execute_destroy:
        description: "Execute terraform destroy after tests"
        type: boolean
        required: false
        default: false
      workflow_run_id:
        description: "Workflow run ID to use for artifact retrieval"
        type: string
        required: false
    secrets:
      aws_access_key_id:
        required: true
        description: AWS access key id for terraform
      aws_secret_access_key:
        required: true
        description: AWS secret access key for terraform
      aws_account_id:
        required: true
        description: AWS account id for terraform
      nr_backend_url:
        required: false
        description: New Relic backend URL (terraform variable)
      nr_ingest_key:
        required: false
        description: New Relic ingest key (terraform variable)
      nr_api_key:
        required: true
        description: New Relic API key for e2e tests
      nr_account_id:
        required: true
        description: New Relic account id for e2e tests
      nr_api_base_url:
        required: true
        description: New Relic API base URL for e2e tests

permissions:
  contents: read

jobs:
  setup:
    name: Setup Workflow
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ format('{0}{1}-{2}', inputs.workspace_prefix, inputs.fips && '-fips' || '', inputs.distro) }}
      docker-manifest-sha: ${{ steps.get-docker-manifest-sha.outputs.sha }}
      image-tag: ${{ steps.get-docker-manifest-sha.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA from ref
        id: get-sha
        run: |
          ref="${{ inputs.ref || github.sha }}"
          
          # git rev-parse works for both SHAs and branch/tag names
          sha=$(git rev-parse "$ref")
          
          echo "Resolved '$ref' to SHA: $sha"
          echo "sha=$sha" >> $GITHUB_OUTPUT
          
      - name: Download artifact from successful build
        uses: actions/download-artifact@v4
        with:
          name: ${{ format('goreleaser_output_{0}{1}_{2}', inputs.distro, inputs.fips && '-fips' || '', steps.get-sha.outputs.sha) }}
          path: ./artifacts/
          # Add this to download from a different workflow run
          run-id: ${{ inputs.workflow_run_id || github.run_id }}
          github-token: ${{ github.token }}

      - name: Output docker manifest sha
        id: get-docker-manifest-sha
        run: |
          # Debug: Show metadata.json contents
          echo "=== Debugging metadata.json ==="
          if [[ -f "./artifacts/dist/metadata.json" ]]; then
            echo "Metadata.json contents:"
            cat ./artifacts/dist/metadata.json
            echo "=========================="
          else
            echo "::error::metadata.json file not found in artifacts/dist/"
            echo "Available files in artifacts/dist:"
            ls -la ./artifacts/dist/ || echo "No dist directory found"
            exit 1
          fi
          
          version=$(cat ./artifacts/dist/metadata.json | jq -r '.version')
          
          # Check if version exists and is not null/empty
          if [[ -z "$version" || "$version" == "null" ]]; then
            echo "::error::Version not found or empty in metadata.json"
            echo "Extracted version value: '$version'"
            # List contents of ./artifacts with tree 
            tree ./artifacts || echo "Could not list artifacts directory"
            exit 1
          fi
          
          docker_manifest_digest=$(jq -r '.[] | select(.type == "Docker Manifest") | .extra.Digest' ./artifacts/dist/artifacts.json | head -1)
          # Check if docker_manifest_digest is valid
          if [[ -z "$docker_manifest_digest" || "$docker_manifest_digest" == "null" ]]; then
            echo "::error::Docker manifest digest not found or empty"
            echo "Extracted docker_manifest_digest value: '$docker_manifest_digest'"
            exit 1
          fi
          
          echo "Using docker manifest digest: ${docker_manifest_digest}"
          echo "digest=${docker_manifest_digest}" >> $GITHUB_OUTPUT
          
          echo "image_tag=${version}${{ format('{0}',inputs.fips && '-fips' || '') }}@${docker_manifest_digest}" >> $GITHUB_OUTPUT
  
  terraform-deploy:
    name: Terraform Deploy
    needs: setup
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      TF_VAR_aws_account_id: ${{ secrets.aws_account_id }}
      TF_VAR_nr_backend_url: ${{ secrets.nr_backend_url }}
      TF_VAR_nr_ingest_key: ${{ secrets.nr_ingest_key }}
      TF_VAR_distro: ${{ inputs.distro }}
      TF_VAR_fips: ${{ inputs.fips }}
      TF_VAR_image_tag: ${{ needs.setup.outputs.image-tag }}
      TF_VAR_k8s_namespace_prefix: ${{ inputs.workspace_prefix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform Setup & Workspace
        uses: ./.github/actions/terraform-setup
        with:
          terraform_version: 1.9.8
          aws_account_id: ${{ secrets.aws_account_id }}
          working_directory: ./test/terraform/nightly
          workspace: ${{ needs.setup.outputs.workspace }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./test/terraform/nightly

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./test/terraform/nightly

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: terraform-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "~1.24"

      - name: Run Tests
        run: make -f ./test/e2e/Makefile ci_test-nightly
        env:
          NR_API_KEY: ${{ secrets.nr_api_key }}
          NR_ACCOUNT_ID: ${{ secrets.nr_account_id }}
          NR_API_BASE_URL: ${{ secrets.nr_api_base_url }}
          DISTRO: ${{ inputs.distro }}
          K8S_CONTEXT_NAME: "aws-ci-e2etest"
          FIPS: ${{ inputs.fips && 'true' || '' }}
          # TEST_MODE is set internally by the ci_test-nightly target (nightlyOnly)

  terraform-destroy:
    name: Terraform Destroy
    needs: [ setup, e2e-tests, terraform-deploy ]
    if: ${{ inputs.execute_destroy && always() }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      TF_VAR_aws_account_id: ${{ secrets.aws_account_id }}
      TF_VAR_nr_backend_url: ${{ secrets.nr_backend_url }}
      TF_VAR_nr_ingest_key: ${{ secrets.nr_ingest_key }}
      TF_VAR_distro: ${{ inputs.distro }}
      TF_VAR_fips: ${{ inputs.fips }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}

      - name: Terraform Setup & Workspace
        uses: ./.github/actions/terraform-setup
        with:
          terraform_version: 1.9.8
          aws_account_id: ${{ secrets.aws_account_id }}
          working_directory: ./test/terraform/nightly
          workspace: ${{ needs.setup.outputs.workspace }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./test/terraform/nightly
