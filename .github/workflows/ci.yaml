name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  TEST_CLUSTER_NAME: ci-e2etest

jobs:
  build:
    name: Validate distributions build, third party libraries and security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dist:
          - nr-otel-collector
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Tidy go.mod files
        run: go mod tidy

      - name: Verify build
        run: make ci DISTRIBUTIONS=${{ matrix.dist }}

      - name: Login to Docker
        uses: docker/login-action@v3
        if: ${{ env.ACT }}
        with:
          registry: docker.io
          username: ${{ secrets.OTELCOMM_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.OTELCOMM_DOCKER_HUB_PASSWORD }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }}
          passphrase: ${{ secrets.OHAI_GPG_PASSPHRASE }}

      - name: Write GPG to path in memory for signing rpm/deb
        id: write_gpg_to_path
        run: |
          GPG_KEY_PATH="$(mktemp /dev/shm/gpg.XXXXXX)"
          echo "$GPG_PRIVATE_KEY" | base64 -d >> "$GPG_KEY_PATH"
          echo "gpg_key_path=$GPG_KEY_PATH" >> $GITHUB_OUTPUT
        env:
          GPG_PRIVATE_KEY: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }}

      - name: Build binaries & packages with GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          NFPM_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_KEY_PATH: ${{ steps.write_gpg_to_path.outputs.gpg_key_path }}
          REGISTRY: "newrelic/${{ matrix.dist }}"
        with:
          distribution: goreleaser
          version: '~> v2'
          args: --snapshot --clean --skip=publish,validate --timeout 2h
          workdir: distributions/${{ matrix.dist }}

      - name: Extract image version and arch
        run: |
          VERSION=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.version')
          ARCH=$(echo '${{ runner.arch }}' | sed 's/X/amd/g')
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "arch=${ARCH@L}" >> $GITHUB_ENV

      - name: Setup local kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.21.0
          cluster_name: ${{ env.TEST_CLUSTER_NAME }}
          wait: 60s

      - uses: azure/setup-helm@v4.2.0

      - name: Run local e2e tests
        run: |
          IMAGE_TAG=${{ env.version }}-${{ env.arch }} \
          KIND_CLUSTER_NAME=${{ env.TEST_CLUSTER_NAME }} \
          make -f ./test/e2e/Makefile ci_test-fast DISTRO=${{ matrix.dist }}

      - name: Trivy security check
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "newrelic/${{ matrix.dist }}:${{ env.version }}-${{ env.arch }}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: "HIGH,CRITICAL"
        env:
          # dbs are downloaded async in trivy-cache.yml
          TRIVY_SKIP_DB_UPDATE: ${{ !env.ACT }}
          TRIVY_SKIP_JAVA_DB_UPDATE: true

  terraform:
    uses: ./.github/workflows/terraform.yml
    if: ${{ !github.event.act && github.event.pull_request.user.login != 'dependabot[bot]' }}
    with:
      branch: ${{ github.ref }}
      tf_work_subdir: permanent
      execute_plan: true
      # apply only after merge to main
      execute_apply: ${{ github.ref_name == 'main' && github.event_name == 'push' }}
    secrets:
      aws_access_key_id: ${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{secrets.OTELCOMM_AWS_TEST_ACC_SECRET_ACCESS_KEY}}
      aws_account_id: ${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCOUNT_ID }}
      nr_backend_url: ${{secrets.NR_STAGING_BACKEND_URL}}
      nr_ingest_key: ${{ secrets.OTELCOMM_NR_INGEST_KEY }}
