name: üè∑Ô∏è Release | Draft

on:
  push:
    tags:
      - "*.*.*"

env:
  REGISTRY: ${{ secrets.OTELCOMM_AWS_TEST_ACC_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

permissions:
  contents: read
  packages: write

jobs:
  setup:
    name: Setup Workflow
    runs-on: ubuntu-latest
    outputs:
      distributions: ${{ steps.discover.outputs.distributions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions

      - name: Discover Distributions
        id: discover
        uses: ./.github/actions/discover-distributions

  verify-artifacts:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        distribution: ${{ fromJson(needs.setup.outputs.distributions) }}
        fips: [false, true]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/verify-artifacts

      - name: Verify CI Artifacts Exist
        uses: ./.github/actions/verify-artifacts
        with:
          distribution: ${{ matrix.distribution }}
          fips: ${{ matrix.fips }}
          sha: ${{ github.sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  draft-release:
    runs-on: ubuntu-latest
    needs: [setup, verify-artifacts]
    outputs:
      release-tag: ${{ steps.get-release.outputs.release-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "~1.24"

      - name: Draft Release From Root Config
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "2.11.2"
          args: --clean --timeout 2h
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Information
        id: get-release
        run: |
          # Extract tag from GoReleaser metadata
          tag=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.tag')
          version=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.version')
          echo "Looking up release for tag: $tag"

          # Get the specific release by tag
          release_info=$(gh api repos/${{ github.repository }}/releases/tags/$tag)

          release_id=$(echo "$release_info" | jq -r '.id')
          release_url=$(echo "$release_info" | jq -r '.html_url')

          echo "release-tag=$tag" >> $GITHUB_OUTPUT

          echo "üöÄ Release Draft Created!"
          echo "Release ID: $release_id"
          echo "Release URL: $release_url"
          echo "Release Tag: $tag"
          echo "Release Version: $version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: draft-release
    strategy:
      matrix:
        distribution:
          - nrdot-collector
          - nrdot-collector-host
          - nrdot-collector-k8s
        fips: [false, true]
    steps:
      - name: Download CI Artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser_output_${{ matrix.distribution }}${{ matrix.fips && '-fips' || '' }}_${{ github.sha }}
          path: artifacts/

      - name: List Downloaded Artifacts
        run: |
          echo "Downloaded artifacts for ${{ matrix.distribution }}${{ matrix.fips && ' (FIPS)' || '' }}:"
          find artifacts -type f | head -100

      - name: Upload Artifacts to Release
        run: |
          if [ ! -f "artifacts/dist/artifacts.json" ]; then
            echo "‚ùå artifacts.json not found"
            exit 1
          fi

          echo "üì¶ Uploading artifacts for ${{ matrix.distribution }}${{ matrix.fips && ' (FIPS)' || '' }}"

          # Read artifacts.json and upload each file with a path
          jq -r '.[] | select(has("path")) | .path' artifacts/dist/artifacts.json | while IFS= read -r artifact_path; do
            if [ -f "artifacts/$artifact_path" ]; then
              echo "‚¨ÜÔ∏è  Uploading: $artifact_path"
              gh release upload ${{ needs.draft-release.outputs.release-tag }} \
                "artifacts/$artifact_path" \
                --clobber
            else
              echo "‚ö†Ô∏è  File not found: artifacts/$artifact_path"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
