name: üß© CI Base

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
      nightly:
        required: false
        type: boolean
        default: false
      fips:
        required: false
        type: boolean
        default: false
      test_cluster_name:
        required: false
        type: string
        default: 'ci-${{ github.run_id }}-${{ github.run_attempt }}'
    secrets:
      registry:
        required: false
      docker_hub_username:
        required: true
      docker_hub_password:
        required: true
      gpg_private_key:
        required: true
      gpg_passphrase:
        required: true
      nr_backend_url:
        required: false
      nr_ingest_key:
        required: false
      nr_account_id:
        required: false
      nr_api_key:
        required: false

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "~1.24"

      - name: Tidy go.mod files
        run: go mod tidy

      - name: Ensure goreleaser up to date
        run: make check

      - name: Generate sources cache key
        id: sources-cache-key
        run: |
          SOURCES_HASH="${{ hashFiles(
            format('distributions/{0}/manifest.yaml', inputs.distribution),
            'Makefile'
          ) }}"
          if [ ${{ inputs.fips }} = "true" ]; then
            SOURCES_PATH="distributions/${{ inputs.distribution }}/_build-fips"
            SOURCES_KEY="sources-fips-${SOURCES_HASH}"
          else
            SOURCES_PATH="distributions/${{ inputs.distribution }}/_build"
            SOURCES_KEY="sources-${SOURCES_HASH}"
          fi
          echo "sources_path=${SOURCES_PATH}" >> $GITHUB_OUTPUT
          echo "sources_key=sources-${{ inputs.distribution }}-${{ github.ref_name }}-${SOURCES_KEY}" >> $GITHUB_OUTPUT

      - name: Cache sources
        id: cache-sources
        uses: actions/cache@v4
        with:
          path: ${{ steps.sources-cache-key.outputs.sources_path }}
          key: ${{ steps.sources-cache-key.outputs.sources_key }}

      - name: Generate sources
        if: steps.cache-sources.outputs.cache-hit != 'true'
        run: make ci DISTRIBUTIONS=${{ inputs.distribution }}

      - name: Skip source generation (cached)
        if: steps.cache-sources.outputs.cache-hit == 'true'
        run: echo "‚úÖ Source generation skipped - no source changes detected"

      - name: Login to Docker
        uses: docker/login-action@v3
        if: ${{ env.ACT }}
        with:
          registry: docker.io
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_password }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Install cross-compilation toolchain
        if: inputs.fips == true
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-x86-64-linux-gnu \
            g++-x86-64-linux-gnu \
            libc6-dev-arm64-cross \
            libc6-dev-amd64-cross

      - name: Import GPG key
        if: ${{github.event.pull_request.user.login != 'dependabot[bot]' }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          passphrase: ${{ secrets.gpg_passphrase }}

      - name: Write GPG to path in memory for signing rpm/deb
        if: ${{github.event.pull_request.user.login != 'dependabot[bot]' }}
        id: write_gpg_to_path
        run: |
          GPG_KEY_PATH="$(mktemp /dev/shm/gpg.XXXXXX)"
          echo "$GPG_PRIVATE_KEY" | base64 -d >> "$GPG_KEY_PATH"
          echo "gpg_key_path=$GPG_KEY_PATH" >> $GITHUB_OUTPUT
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}

      - name: Build Args
        run: |
          if [ ${{ inputs.nightly }} = "true" ]; then
            echo "goreleaser_args=--snapshot --clean --skip=publish,validate --timeout 2h --config .goreleaser-nightly.yaml" >> $GITHUB_ENV
          elif [ ${{ inputs.fips }} = "true" ]; then
            echo "goreleaser_args=--snapshot --clean --skip=publish,validate --timeout 2h --config .goreleaser-fips.yaml" >> $GITHUB_ENV
          elif [ ${{github.event.pull_request.user.login == 'dependabot[bot]' }} ]; then
            echo "goreleaser_args=--snapshot --clean --skip=publish,validate,sign --timeout 2h" >> $GITHUB_ENV
          else
            echo "goreleaser_args=build --single-target --snapshot --clean" >> $GITHUB_ENV
          fi
      
      - name: Generate docker cache key
        id: build-cache-keys
        run: |
          # Hash files that affect binary generation
          if [ ${{inputs.fips}} = "true" ]; then
            BINARY_HASH="${{ hashFiles(
              format('distributions/{0}/.goreleaser-fips.yaml', inputs.distribution),
              format('distributions/{0}/_build-fips/*', inputs.distribution)
            ) }}"
          else
            BINARY_HASH="${{ hashFiles(
              format('distributions/{0}/.goreleaser*.yaml', inputs.distribution),
              format('distributions/{0}/_build/*', inputs.distribution)
            ) }}"
          fi
          echo "binary_key=goreleaser-build-${{ inputs.distribution }}-${{ github.ref_name }}-${BINARY_HASH}" >> $GITHUB_OUTPUT
          # Extended hash for Docker build (includes generated sources)
          DOCKER_HASH="${{ hashFiles(
            format('distributions/{0}/Dockerfile', inputs.distribution),
            format('distributions/{0}/config*.yaml', inputs.distribution)
          ) }}"
          echo "docker_key=docker-build-${{ inputs.distribution }}-${{ github.ref_name }}-${DOCKER_HASH}-${BINARY_HASH}" >> $GITHUB_OUTPUT
      
      - name: Cache GoReleaser build
        id: cache-goreleaser
        if: ${{ !inputs.nightly }}
        uses: actions/cache@v4
        with:
          path: |
            distributions/${{ inputs.distribution }}/dist
            ~/.cache/go-build
          key: ${{ steps.build-cache-keys.outputs.binary_key }}
          restore-keys: |
            goreleaser-build-${{ inputs.distribution }}-

      - name: Build binaries & packages with GoReleaser
        id: goreleaser
        if: steps.cache-goreleaser.outputs.cache-hit != 'true'
        uses: goreleaser/goreleaser-action@v6
        env:
          NFPM_PASSPHRASE: ${{ secrets.gpg_passphrase }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_KEY_PATH: ${{ steps.write_gpg_to_path.outputs.gpg_key_path }}
          REGISTRY: "${{ secrets.registry }}"
        with:
          distribution: goreleaser
          version: '2.11.2'
          args: ${{ env.goreleaser_args }}
          workdir: distributions/${{ inputs.distribution }}
      
      - name: Skip GoReleaser build (cached)
        if: steps.cache-goreleaser.outputs.cache-hit == 'true'
        run: echo "‚úÖ GoReleaser build skipped - using cached binaries"

      - name: Extract relevant metadata from GoReleaser output
        run: |
          if [ "${{ steps.cache-goreleaser.outputs.cache-hit }}" = "true" ]; then            
            # Try to find version from dist folder structure or metadata file
            if [ -f "distributions/${{ inputs.distribution }}/dist/metadata.json" ]; then
              VERSION=$(jq -r '.version' distributions/${{ inputs.distribution }}/dist/metadata.json)
            else
              # Fallback version
              VERSION="cached-$(date +%Y%m%d-%H%M)"
              echo "‚ö†Ô∏è Warning: No metadata found, using fallback version: $VERSION"
            fi
            
            echo "Using cached version: $VERSION"
          else
            # Extract from fresh GoReleaser build
            VERSION=$(echo '${{ steps.goreleaser.outputs.metadata }}' | jq -r '.version')
            echo "Using fresh build version: $VERSION"
          fi
          ARCH=$(echo '${{ runner.arch }}' | sed 's/X/amd/g')
          ARCH=${ARCH@L}
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "arch=$ARCH" >> $GITHUB_ENV
          if [ ${{ inputs.nightly }} = "true" ]; then
            echo "image_tag=$VERSION-nightly-$ARCH" >> $GITHUB_ENV
          elif [ ${{ inputs.fips }} = "true" ]; then
            echo "image_tag=$VERSION-fips-$ARCH" >> $GITHUB_ENV
          else
            echo "image_tag=$VERSION-$ARCH" >> $GITHUB_ENV
          fi

      - name: Copy GoReleaser binary to Docker context
        if: ${{ !inputs.nightly }}
        run: |
          cd distributions/${{ inputs.distribution }}
          BINARY_FILE="${{ inputs.distribution }}"
          if [ ${{ inputs.fips }} = "true" ]; then
            BINARY_FILE="${BINARY_FILE}-fips"
          fi
          BINARY_PATH="$(find dist -name "${{ inputs.distribution }}*_linux_amd64*" -type d)/$BINARY_FILE"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "‚ùå Error: Binary not found at $BINARY_PATH"
            find dist -name "*${{ inputs.distribution }}*" -type f
            exit 1
          fi
          cp "$BINARY_PATH" ./${{ inputs.distribution }}
          echo "‚úÖ Binary copied: $(ls -la ./${{ inputs.distribution }})"
      

      - name: Build and load Docker image
        uses: docker/build-push-action@v5
        if: ${{ !inputs.nightly }}
        with:
          context: distributions/${{ inputs.distribution }}
          platforms: linux/amd64
          push: false
          load: true
          tags: |
            ${{ secrets.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}
          cache-from: |
            type=gha,scope=${{ steps.build-cache-keys.outputs.docker_key }}
            type=gha,scope=docker-build-${{ inputs.distribution }}-${{ github.ref_name }}
            type=gha,scope=docker-build-${{ inputs.distribution }}-main
          cache-to: |
            type=gha,mode=max,scope=${{ steps.build-cache-keys.outputs.docker_key }}
            ${{ github.ref_name == 'main' && format('type=gha,mode=max,scope={0}-main', inputs.distribution) || format('type=gha,mode=max,scope={0}-{1}', inputs.distribution, github.ref_name) }}

      - name: Setup local kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.21.0
          cluster_name: ${{ inputs.test_cluster_name }}
          wait: 60s

      - name: Load image into kind cluster
        run: |
          kind load docker-image "${{ secrets.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}" --name ${{ inputs.test_cluster_name }}

      - uses: azure/setup-helm@v4.2.0

      - name: Validate Usage of BoringCrypto
        if: inputs.fips == true
        run: |
          ARCH=$(echo '${{ runner.arch }}' | sed 's/X/amd/g')
          ARCH=${ARCH@L}
          OS=$(echo '${{ runner.os }}')
          OS=${OS@L}
          printf -v BINARY_PATTERN "distributions/%s/dist/%s-fips_%s_%s*/*" "${{ inputs.distribution}}" "${{ inputs.distribution }}" "${OS}" "${ARCH}"
          echo "Looking for binary pattern: ${BINARY_PATTERN}"
          BINARY=$(find ${BINARY_PATTERN} 2>/dev/null | head -1)
          if [[ -z "${BINARY}" ]]; then
            echo "Error"
            exit 1
          fi
          go tool nm ${BINARY} | grep '_Cfunc__goboringcrypto_' || (echo 'fips distro should not use standard crypto' && exit 1)
      
      - name: Validay FIPS ciphers
        if: inputs.fips == true
        run: |
          ./fips/validation/validate.sh "${{ secrets.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}"

      - name: Run local e2e tests
        if: ${{ hashFiles(format('distributions/{0}/test/spec-local.yaml', inputs.distribution)) != '' }}
        uses: newrelic/newrelic-integration-e2e-action@v1
        env:
          NR_BACKEND_URL: ${{ secrets.nr_backend_url }}
          IMAGE_TAG: ${{ env.image_tag }}
          IMAGE_REPO: ${{ secrets.registry }}/${{ inputs.distribution}}
        with:
          retry_seconds: 15
          retry_attempts: 20
          agent_enabled: false
          spec_path: distributions/${{ inputs.distribution}}/test/spec-local.yaml
          account_id: ${{ secrets.nr_account_id }}
          api_key: ${{ secrets.nr_api_key }}
          license_key: ${{ secrets.nr_ingest_key }}
          region: 'US'

      - name: Trivy security check
        if: ${{ !inputs.nightly }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "${{ secrets.registry }}/${{ inputs.distribution}}:${{ env.image_tag }}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: "HIGH,CRITICAL"
        env:
          # dbs are downloaded async in trivy-cache.yml
          TRIVY_SKIP_DB_UPDATE: ${{ !env.ACT }}
          TRIVY_SKIP_JAVA_DB_UPDATE: true
