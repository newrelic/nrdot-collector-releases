name: üß© CI Base

on:
  workflow_call:
    inputs:
      distribution:
        required: true
        type: string
      fips:
        required: false
        type: boolean
        default: false
      publish:
        required: false
        type: boolean
        default: false
      test_cluster_name:
        required: false
        type: string
        default: "ci-${{ github.run_id }}-${{ github.run_attempt }}"
    secrets:
      gpg_private_key:
        required: true
      gpg_passphrase:
        required: true
      nr_backend_url:
        required: false
      nr_ingest_key:
        required: false
      nr_account_id:
        required: false
      nr_api_key:
        required: false
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      aws_account_id:
        required: false
    outputs:
      artifact_name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build.outputs.artifact_name }}
      docker_manifest_sha_name:
        description: "Name of the docker manifest SHA file"
        value: ${{ jobs.build.outputs.docker_manifest_sha_name }}

permissions:
  contents: read

env:
  caching_enabled: ${{ !inputs.publish }}
  registry: "${{ secrets.aws_account_id }}.dkr.ecr.us-east-1.amazonaws.com"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.set-outputs.outputs.artifact_name }}
      docker_manifest_sha_name: ${{ steps.set-outputs.outputs.docker_manifest_sha_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for tag metadata

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "~1.24"
          cache: ${{ env.caching_enabled }}

      - name: Tidy go.mod files
        run: go mod tidy

      - name: Ensure goreleaser up to date
        run: make check

      - name: Generate sources cache key
        id: sources-cache-key
        if: ${{ env.caching_enabled }}
        run: |
          SOURCES_HASH="${{ hashFiles(
            format('distributions/{0}/manifest.yaml', inputs.distribution),
            'scripts/build.sh',
            'Makefile',
            'fips/fips.go'
          ) }}"
          echo "sources_key=sources-${{ inputs.distribution }}-${SOURCES_HASH}" >> $GITHUB_OUTPUT

      - name: Cache sources
        id: cache-sources
        uses: actions/cache@v4
        if: ${{ env.caching_enabled }}
        with:
          path: |
            distributions/${{ inputs.distribution }}/_build
            distributions/${{ inputs.distribution }}/_build-fips
          key: ${{ steps.sources-cache-key.outputs.sources_key }}

      - name: Generate sources
        if: steps.cache-sources.outputs.cache-hit != 'true'
        run: make ci DISTRIBUTIONS=${{ inputs.distribution }}

      - name: Skip source generation (cached)
        if: steps.cache-sources.outputs.cache-hit == 'true'
        run: echo "‚úÖ Source generation skipped - no source changes detected"

      - name: Verify source files exist
        run: ./scripts/validate-source-files.sh -d ${{ inputs.distribution }} -f ${{ inputs.fips }}
      
      - name: Configure AWS Credentials
        if: ${{ inputs.publish }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/resource-provisioner
          role-skip-session-tagging: true
      
      - name: Login to ECR
        if: ${{ inputs.publish }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}/${{ inputs.distribution }}

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - name: Install cross-compilation toolchain
        if: inputs.fips
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-x86-64-linux-gnu \
            g++-x86-64-linux-gnu \
            libc6-dev-arm64-cross \
            libc6-dev-amd64-cross

      - name: Import GPG key
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          passphrase: ${{ secrets.gpg_passphrase }}

      - name: Write GPG to path in memory for signing rpm/deb
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
        id: write_gpg_to_path
        run: |
          GPG_KEY_PATH="$(mktemp /dev/shm/gpg.XXXXXX)"
          echo "$GPG_PRIVATE_KEY" | base64 -d >> "$GPG_KEY_PATH"
          echo "gpg_key_path=$GPG_KEY_PATH" >> $GITHUB_OUTPUT
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}

      - name: Configure AWS Credentials
        if: ${{ inputs.publish }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/resource-provisioner
          role-skip-session-tagging: true

      - name: Build Args
        run: |
          # Determine base skip flags and snapshot mode based on publish input
          if [ "${{ inputs.publish }}" = "true" ]; then
            BASE_SKIP="--skip=announce,validate"
            SNAPSHOT_FLAG=""  # No --snapshot for publishing builds to get proper versions
          else
            BASE_SKIP="--skip=publish,validate"
            SNAPSHOT_FLAG="--snapshot"  # Use --snapshot for dev builds to get SNAPSHOT versions
          fi

          if [ "${{ github.event.pull_request.user.login }}" = "dependabot[bot]" ]; then
            BASE_SKIP="--skip=publish,validate,sign"
          fi

          GORELEASER_CONFIG="${{ format('.goreleaser{0}.yaml', inputs.fips && '-fips' || '') }}"

          echo "goreleaser_args=$SNAPSHOT_FLAG --clean $BASE_SKIP --timeout 2h --config $GORELEASER_CONFIG" >> $GITHUB_ENV
          echo "goreleaser_file=$GORELEASER_CONFIG" >> $GITHUB_ENV

      - name: Generate binary cache key
        id: generate_binary_key
        run: |
          BINARY_HASH="${{ hashFiles(
            format('distributions/{0}/.goreleaser*.yaml', inputs.distribution),
            format('distributions/{0}/_build*/*', inputs.distribution)
          ) }}"
          ARGS_HASH=$(echo "${{ env.goreleaser_args }}" | sha256sum | cut -d' ' -f1)
          echo binary_key=goreleaser-build-${{ inputs.distribution }}-${ARGS_HASH}-${BINARY_HASH} >> $GITHUB_OUTPUT

      - name: Cache goreleaser build
        id: cache-goreleaser
        if: ${{ env.caching_enabled }}
        uses: actions/cache@v4
        with:
          path: |
            distributions/${{ inputs.distribution }}/dist
          key: ${{ steps.generate_binary_key.outputs.binary_key }}

      - name: Build binaries & packages with GoReleaser
        # We need to ensure we run goreleaser in the event we're attempting to publish
        if: inputs.publish || (steps.cache-goreleaser.outputs.cache-hit != 'true')
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          NFPM_PASSPHRASE: ${{ secrets.gpg_passphrase }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_KEY_PATH: ${{ steps.write_gpg_to_path.outputs.gpg_key_path }}
          REGISTRY: "${{ env.registry }}"
        with:
          distribution: goreleaser
          version: "2.11.2"
          args: ${{ env.goreleaser_args }}
          workdir: distributions/${{ inputs.distribution }}
      
      - name: Skip GoReleaser build (cached)
        if: steps.cache-goreleaser.outputs.cache-hit == 'true'
        run: echo "‚úÖ GoReleaser build skipped - using cached binaries"

      - name: Validate GoReleaser build
        run: ./scripts/validate-goreleaser-build.sh -d ${{ inputs.distribution }}
          
      - name: Extract relevant metadata
        run: |
          # Always use metadata.json from the dist folder (works for both cached and fresh builds)
          VERSION=$(jq -r '.version' distributions/${{ inputs.distribution }}/dist/metadata.json)
          echo "Version from metadata.json: $VERSION"
          ARCH=$(echo '${{ runner.arch }}' | sed 's/X/amd/g')
          ARCH=${ARCH@L}
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "arch=$ARCH" >> $GITHUB_ENV
          if [ ${{ inputs.fips }} = "true" ]; then
            echo "image_tag=$VERSION-fips-$ARCH" >> $GITHUB_ENV
          else
            echo "image_tag=$VERSION-$ARCH" >> $GITHUB_ENV
          fi

      - name: Copy GoReleaser binary to Docker context
        id: copy-binary
        if: steps.cache-goreleaser.outputs.cache-hit == 'true'
        run: |
          cd distributions/${{ inputs.distribution }}
          BINARY_PATH="$(find dist -name "${{ inputs.distribution }}*_linux_${{ env.arch }}*" -type d)/${{ inputs.distribution }}"
          if [ ${{ inputs.fips }} = "true" ]; then
            BINARY_PATH+="-fips"
          fi
          if [ ! -f "$BINARY_PATH" ]; then
            echo "‚ùå Error: Binary not found at $BINARY_PATH"
            find dist -name "*${{ inputs.distribution }}*" -type f
            exit 1
          fi
          # move dockerfile dependencies to .tmp for easy cleanup when running in Act
          BINARY_TMP="${{ runner.temp }}/docker/${{ inputs.distribution }}"
          if [ ${{ inputs.fips }} = "true" ]; then
            BINARY_TMP+="-fips"
          fi
          mkdir -p ${BINARY_TMP}
          cp "$BINARY_PATH" "${BINARY_TMP}/${{ inputs.distribution }}"
          cp Dockerfile ${BINARY_TMP}
          for file in $(yq ".dockers[] | select(.goarch == \"${{ env.arch }}\") | .extra_files[]" ${{ env.goreleaser_file }}); do
            cp "${file}" ${BINARY_TMP}
          done
          echo "‚úÖ Binary copied: $(ls -la ${BINARY_TMP})"
          echo "binary_tmp=${BINARY_TMP}" >> $GITHUB_OUTPUT

      - name: Build and load Docker image
        uses: docker/build-push-action@v5
        if: steps.cache-goreleaser.outputs.cache-hit == 'true'
        with:
          context: ${{ steps.copy-binary.outputs.binary_tmp }}
          platforms: linux/${{ env.arch }}
          push: false
          load: true
          tags: |
            ${{ env.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}

      - name: Validate Usage of BoringCrypto
        if: inputs.fips
        run: |
          ARCH=$(echo '${{ runner.arch }}' | sed 's/X/amd/g')
          ARCH=${ARCH@L}
          OS=$(echo '${{ runner.os }}')
          OS=${OS@L}
          printf -v BINARY_PATTERN "distributions/%s/dist/%s-fips_%s_%s*/*" "${{ inputs.distribution}}" "${{ inputs.distribution }}" "${OS}" "${ARCH}"
          echo "Looking for binary pattern: ${BINARY_PATTERN}"
          BINARY=$(find ${BINARY_PATTERN} 2>/dev/null | head -1)
          if [[ -z "${BINARY}" ]]; then
            echo "Error: Binary ${BINARY} not found"
            exit 1
          fi
          go tool nm ${BINARY} | grep '_Cfunc__goboringcrypto_' || (echo 'fips distro should not use standard crypto' && exit 1)

      - name: Validate FIPS ciphers
        if: inputs.fips
        run: |
          ./fips/validation/validate.sh "${{ env.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}"

      - name: Setup local kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.21.0
          cluster_name: ${{ inputs.test_cluster_name }}
          wait: 60s

      - name: Load image into kind cluster
        run: |
          kind load docker-image "${{ env.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}" --name ${{ inputs.test_cluster_name }}

      - uses: azure/setup-helm@v4.2.0

      - name: Run local e2e tests
        if: ${{ hashFiles(format('distributions/{0}/test/spec-local.yaml', inputs.distribution)) != '' }}
        uses: newrelic/newrelic-integration-e2e-action@v1
        env:
          NR_BACKEND_URL: ${{ secrets.nr_backend_url }}
          IMAGE_TAG: ${{ env.image_tag }}
          IMAGE_REPO: ${{ env.registry }}/${{ inputs.distribution }}
        with:
          retry_seconds: 15
          retry_attempts: 20
          agent_enabled: false
          spec_path: distributions/${{ inputs.distribution}}/test/spec-local.yaml
          account_id: ${{ secrets.nr_account_id }}
          api_key: ${{ secrets.nr_api_key }}
          license_key: ${{ secrets.nr_ingest_key }}
          region: "US"

      - name: Trivy security check
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: "${{ env.registry }}/${{ inputs.distribution}}:${{ env.image_tag }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
        env:
          # dbs are downloaded async in trivy-cache.yml
          TRIVY_SKIP_DB_UPDATE: ${{ !env.ACT }}
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Prepare GoReleaser Artifacts
        id: set-outputs
        run: |
          echo "=== Getting Docker Image SHA from Local Registry ==="
          
          # Get the SHA of the locally built/loaded Docker image
          docker_image_name="${{ env.registry }}/${{ inputs.distribution }}:${{ env.image_tag }}"
          echo "Looking for Docker image: ${docker_image_name}"
          
          # Get the image SHA from local Docker registry
          docker_manifest_sha=$(docker image inspect "$docker_image_name" --format '{{.Id}}' | sed 's/sha256://')
          
          if [[ -z "$docker_manifest_sha" ]] || [[ "$docker_manifest_sha" == "null" ]]; then
            echo "::error::Could not get Docker image SHA for: $docker_image_name"
            echo "Available local images:"
            docker images --filter "reference=${{ env.registry }}/${{ inputs.distribution }}" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}"
            exit 1
          fi
          
          # Validate SHA format
          if [[ ! "$docker_manifest_sha" =~ ^[a-f0-9]{64}$ ]]; then
            echo "::error::Invalid Docker image SHA format: '$docker_manifest_sha'"
            exit 1
          fi
          
          echo "‚úÖ Docker image: ${docker_image_name}"
          echo "‚úÖ Docker image SHA: ${docker_manifest_sha}"
          echo -n "${docker_manifest_sha}" > docker_manifest_sha


          # Set output names
          if [[ "${{ inputs.fips }}" == "true" ]]; then
            artifact_name="goreleaser_output_${{ inputs.distribution }}-fips_${{ github.sha }}"
          else
            artifact_name="goreleaser_output_${{ inputs.distribution }}_${{ github.sha }}"
          fi

          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT
          echo "docker_manifest_sha_name=docker_manifest_sha" >> $GITHUB_OUTPUT

          # Copy dist folder to workspace root for clean upload structure
          cp -r distributions/${{ inputs.distribution }}/dist ${{ github.workspace }}/
       
          echo "=== Artifact Structure [$artifact_name] ==="
          tree dist/ || find dist -type d | sort


      - name: Upload Artifacts
        if: ${{ !env.ACT && inputs.publish }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-outputs.outputs.artifact_name }}
          path: |
            docker_manifest_sha
            dist

