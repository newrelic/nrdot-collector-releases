name: . üöÄ üêß ü¶∫ Prerelease Linux On Demand

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
      dest_prefix:
        description: 'Repo prefix'
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TAG: "0.2.0"
  DOCKER_HUB_ID: ${{secrets.OHAI_DOCKER_HUB_ID}}
  DOCKER_HUB_PASSWORD: ${{secrets.OHAI_DOCKER_HUB_PASSWORD}}
  # required for GHA publish action, should be moved into optional
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  BRANCH: ${{ github.event.inputs.branch }}
  SCHEMA_BRANCH: "${{ github.event.inputs.branch }}"
  DEST_PREFIX: ${{ github.event.inputs.dest_prefix }}
  AWS_S3_BUCKET_NAME: "nr-downloads-ohai-testing"
  AWS_REGION: "us-east-1"
  AWS_S3_LOCK_BUCKET_NAME: "onhost-ci-lock-testing"
  ACCESS_POINT_HOST: "testing"
  RUN_ID: ${{ github.run_id }}
  GPG_MAIL: 'infrastructure-eng@newrelic.com'
  AWS_ACCESS_KEY_ID: ${{ secrets.CAOS_AWS_ACCESS_KEY_ID_TESTING }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.CAOS_AWS_SECRET_ACCESS_KEY_TESTING }}
  AWS_ROLE_ARN: ${{ secrets.CAOS_AWS_ROLE_ARN_TESTING }}
  AWS_ROLE_SESSION_NAME: ${{ secrets.CAOS_AWS_ROLE_SESSION_NAME_TESTING }}
  DISABLE_PUBLISH: true

jobs:
  packaging:
    name: Build and publish packages to custom repo
    runs-on: ubuntu-20.04

    strategy:
      max-parallel: 1
      matrix:
        assetsType:
          - "deb"
          - "rpm"
        include:
          - os: linux
          - os: windows
            assetsType: zip

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0

      - name: "Tag this commit" # required for Goreleaser
        run: git tag nr-otel-collector-${{ env.TAG }}

      - name: Set and validate distribution name and version
        run: .github/workflows/scripts/set_version.sh

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2

      - uses: actions/setup-go@v3
        with:
          go-version: '~1.19.8'
          check-latest: true

      - name: Generate distribution sources
        run: make generate-sources

      - name: Log into Docker.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.OHAI_DOCKER_HUB_ID }}
          password: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}

      - name: Build binaries & packages with GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --skip-docker --skip-publish --timeout 2h
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
          GPG_MAIL: 'infrastructure-eng@newrelic.com'

      - name: Publish ${{ matrix.assetsType }} to S3 action
        uses: newrelic/infrastructure-publish-action@v1.2.6
        with:
          tag: ${{ env.TAG }}
          app_version: ${{ env.NR_VERSION }}
          app_name: "${{ env.NR_DISTRO }}"
          repo_name: "newrelic/opentelemetry-collector-releases"
          schema: "custom"
          schema_url: "https://raw.githubusercontent.com/newrelic/opentelemetry-collector-releases/${{ env.SCHEMA_BRANCH }}/distributions/${{ env.NR_DISTRO }}/upload-schema-${{ matrix.os }}-${{ matrix.assetsType }}.yml"
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_s3_bucket_name: ${{ env.AWS_S3_BUCKET_NAME }}
          aws_s3_lock_bucket_name: ${{ env.AWS_S3_LOCK_BUCKET_NAME }}
          access_point_host: ${{ env.ACCESS_POINT_HOST }}
          run_id: ${{ env.RUN_ID }}
          aws_region: ${{ env.AWS_REGION }}
          aws_role_session_name: ${{ env.AWS_ROLE_SESSION_NAME }}
          aws_role_arn: ${{ env.AWS_ROLE_ARN }}
          # used for signing package stuff
          gpg_passphrase: ${{ env.GPG_PASSPHRASE }}
          gpg_private_key_base64: ${{ env.GPG_PRIVATE_KEY_BASE64 }}
          disable_lock: ${{ env.DISABLE_LOCK }}
          dest_prefix: ${{ env.DEST_PREFIX }}
          local_packages_path: "/srv/dist/"
          apt_skip_mirror: true
