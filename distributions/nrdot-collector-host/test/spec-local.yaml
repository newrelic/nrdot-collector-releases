description: nrdot-collector-host E2E Test

# scoping is achieved via an implicit attribute `testKey=${SCENARIO_TAG}` expected on all tested telemetry

scenarios:
  - description: host telemetry
    before:
      - kubectl create ns nr-${SCENARIO_TAG}
      - |
        kubectl create secret generic 'collector-secrets' --namespace=nr-${SCENARIO_TAG} \
        --from-literal="nrIngestKey=${LICENSE_KEY}" --from-literal="nrBackendUrl=${NR_BACKEND_URL}" \
        --from-literal="serviceName=nrdot-collector-host-e2e-host" --from-literal="scenarioTag=${SCENARIO_TAG}"
      - "helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts || echo 'skipping repo add: open-telemetry repo already exists'"
      - |
        chart_version=$(../../../scripts/get-otel-collector-chart-version.sh)
        helm upgrade --install ${SCENARIO_TAG} open-telemetry/opentelemetry-collector \
        --namespace nr-${SCENARIO_TAG} --version ${chart_version} \
        --values ./host-collector-values.yaml \
        --set image.tag=${IMAGE_TAG} \
        --set image.repository=${IMAGE_REPO}
    after:
      - kubectl logs -l e2eTestLogSelector=nrdot-collector-host-e2e -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get all -o wide
      - helm uninstall ${SCENARIO_TAG} --namespace nr-${SCENARIO_TAG}
      - kubectl delete namespace nr-${SCENARIO_TAG}
    tests:
      # Tests for existence of metrics
      metrics:
        - source: "host-expected-metrics.yaml"
      # Tests for existence of signal + specific attributes
      nrqls:
        - query: FROM Metric SELECT filter(count(*), state='user') as state_user WHERE metricName = 'system.cpu.utilization'
          expected_results:
            - key: state_user
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='user') as state_user WHERE metricName = 'system.cpu.utilization'
          expected_results:
            - key: state_user
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='idle') as state_idle WHERE metricName = 'system.cpu.utilization'
          expected_results:
            - key: state_idle
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='wait') as state_wait WHERE metricName = 'system.cpu.utilization'
          expected_results:
            - key: state_wait
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='steal') as state_steal WHERE metricName = 'system.cpu.utilization'
          expected_results:
            - key: state_steal
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='read') as direction_read WHERE metricName = 'system.disk.io'
          expected_results:
            - key: direction_read
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='write') as direction_write WHERE metricName = 'system.disk.io'
          expected_results:
            - key: direction_write
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='read') as direction_read WHERE metricName = 'system.disk.operation_time'
          expected_results:
            - key: direction_read
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='write') as direction_write WHERE metricName = 'system.disk.operation_time'
          expected_results:
            - key: direction_write
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='read') as direction_read WHERE metricName = 'system.disk.operations'
          expected_results:
            - key: direction_read
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='write') as direction_write WHERE metricName = 'system.disk.operations'
          expected_results:
            - key: direction_write
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='cached') as state_cached WHERE metricName = 'system.memory.usage'
          expected_results:
            - key: state_cached
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='free') as state_free WHERE metricName = 'system.memory.usage'
          expected_results:
            - key: state_free
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='slab_reclaimable') as state_slab_reclaimable WHERE metricName = 'system.memory.usage'
          expected_results:
            - key: state_slab_reclaimable
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='buffered') as state_buffered WHERE metricName = 'system.memory.usage'
          expected_results:
            - key: state_buffered
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='used') as state_used WHERE metricName = 'system.memory.usage'
          expected_results:
            - key: state_used
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='free') as state_free WHERE metricName = 'system.memory.utilization'
          expected_results:
            - key: state_free
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='used') as state_used WHERE metricName = 'system.memory.utilization'
          expected_results:
            - key: state_used
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='page_out') as direction_page_out WHERE metricName = 'system.paging.operations'
          expected_results:
            - key: direction_page_out
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='page_in') as direction_page_in WHERE metricName = 'system.paging.operations'
          expected_results:
            - key: direction_page_in
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='free') as state_free WHERE metricName = 'system.filesystem.inodes.usage'
          expected_results:
            - key: state_free
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='used') as state_used WHERE metricName = 'system.filesystem.inodes.usage'
          expected_results:
            - key: state_used
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='used') as state_used WHERE metricName = 'system.filesystem.usage'
          expected_results:
            - key: state_used
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), state='free') as state_free WHERE metricName = 'system.filesystem.usage'
          expected_results:
            - key: state_free
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), type != 'squashfs') as type_not_squashfs WHERE metricName = 'system.filesystem.utilization'
          expected_results:
            - key: type_not_squashfs
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='receive') as direction_receive WHERE metricName = 'system.network.dropped'
          expected_results:
            - key: direction_receive
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='transmit') as direction_transmit WHERE metricName = 'system.network.dropped'
          expected_results:
            - key: direction_transmit
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='receive') as direction_receive WHERE metricName = 'system.network.errors'
          expected_results:
            - key: direction_receive
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='transmit') as direction_transmit WHERE metricName = 'system.network.errors'
          expected_results:
            - key: direction_transmit
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='receive') as direction_receive WHERE metricName = 'system.network.io'
          expected_results:
            - key: direction_receive
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='transmit') as direction_transmit WHERE metricName = 'system.network.io'
          expected_results:
            - key: direction_transmit
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='receive') as direction_receive WHERE metricName = 'system.network.packets'
          expected_results:
            - key: direction_receive
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), direction='transmit') as direction_transmit WHERE metricName = 'system.network.packets'
          expected_results:
            - key: direction_transmit
              lowerBoundedValue: 1

  - description: receiver-based + internal telemetry
    before:
      - kubectl create ns nr-${SCENARIO_TAG}
      - cp ../../../examples/internal-telemetry-config.yaml ./relay
      - kubectl create configmap 'collector-config' --from-file=relay --namespace=nr-${SCENARIO_TAG}
      - |
        kubectl create secret generic 'collector-secrets' --namespace=nr-${SCENARIO_TAG} \
        --from-literal="nrIngestKey=${LICENSE_KEY}" --from-literal="nrBackendUrl=${NR_BACKEND_URL}" \
        --from-literal="serviceName=nrdot-collector-host-e2e-internal" --from-literal="scenarioTag=${SCENARIO_TAG}"
      - "helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts || echo 'skipping repo add: open-telemetry repo already exists'"
      - |
        chart_version=$(../../../scripts/get-otel-collector-chart-version.sh)
        helm upgrade --install ${SCENARIO_TAG} open-telemetry/opentelemetry-collector \
        --namespace nr-${SCENARIO_TAG} --version ${chart_version} \
        --values ./internal-collector-values.yaml \
        --set image.tag=${IMAGE_TAG} \
        --set image.repository=${IMAGE_REPO}
    after:
      - kubectl logs -l e2eTestLogSelector=nrdot-collector-host-e2e -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get all -o wide
      - helm uninstall ${SCENARIO_TAG} --namespace nr-${SCENARIO_TAG}
      - kubectl delete namespace nr-${SCENARIO_TAG}
    tests:
      # Tests for existence of metrics
      metrics:
        - source: "internal-expected-metrics.yaml"
      # Tests for existence of signal + specific attributes
      nrqls:
        # Resource attributes (any signal would work)
        - query: FROM Log SELECT filter(count(*), service.name is not null) as logs_service_name
          expected_results:
            - key: logs_service_name
              lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), newrelic.collector_telemetry.version is not null) as logs_telemetry_version
          expected_results:
            - key: logs_telemetry_version
              lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), newrelic.service.type='otel_collector') as logs_service_type
          expected_results:
            - key: logs_service_type
              lowerBoundedValue: 1
        # Logs
        - query: FROM Log SELECT count(*) as logs_all
          expected_results:
            - key: logs_all
              lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), otelcol.pipeline.id is not null) as logs_pipeline
          expected_results:
              - key: logs_pipeline
                lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), otelcol.signal is not null) as logs_signal
          expected_results:
            - key: logs_signal
              lowerBoundedValue: 1
        # Spans
        - query: FROM Span SELECT count(*) as spans_all
          expected_results:
            - key: spans_all
              lowerBoundedValue: 1
        # Process metrics
        - query: FROM Metric SELECT filter(count(*), service.instance.id is not null) as process_instance_id WHERE metricName like 'otelcol_process_%'
          expected_results:
            - key: process_instance_id
              lowerBoundedValue: 1
        # Receiver metrics
        - query: FROM Metric SELECT filter(count(*), receiver is not null) as receiver_receiver WHERE metricName like 'otelcol_receiver_%'
          expected_results:
            - key: receiver_receiver
              lowerBoundedValue: 1
        # Processor metrics
        - query: FROM Metric SELECT filter(count(*), processor is not null) as processor_processor WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_processor
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'metrics') as processor_signal_metrics WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_metrics
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'logs') as processor_signal_logs WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_logs
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'traces') as processor_signal_traces WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_traces
              lowerBoundedValue: 1
        # Exporter metrics
        - query: FROM Metric SELECT filter(count(*), exporter is not null) as exporter_exporter WHERE metricName like 'otelcol_exporter_%'
          expected_results:
            - key: exporter_exporter
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), exporter is not null) as queue_exporter WHERE metricName like 'otelcol_exporter_queue_%'
          expected_results:
            - key: queue_exporter
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), data_type is not null) as queue_type WHERE metricName like 'otelcol_exporter_queue_%'
          expected_results:
            - key: queue_type
              lowerBoundedValue: 1
        # Batch processor metrics
        - query: FROM Metric SELECT filter(count(*), processor is not null) as batch_processor WHERE metricName like 'otelcol_processor_batch_%'
          expected_results:
           - key: batch_processor
             lowerBoundedValue: 1
        # Http metrics
        - query: FROM Metric SELECT filter(count(*), server.address is not null) as http_server_address WHERE metricName like 'http.client.request.duration'
          expected_results:
            - key: http_server_address
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), server.address is not null) as http_server_address WHERE metricName like 'http.client.request.body.size'
          expected_results:
            - key: http_server_address
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), http.response.status_code is not null) as http_code WHERE metricName like 'http.client.request.duration'
          expected_results:
          - key: http_code
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), http.response.status_code is not null) as http_code WHERE metricName like 'http.server.request.duration'
          expected_results:
          - key: http_code
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), server.port is not null) as http_port WHERE metricName = 'http.server.request.duration'
          expected_results:
          - key: http_port
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), rpc.grpc.status_code is not null) as rpc_code WHERE metricName like 'rpc.%.duration'
          expected_results:
            - key: rpc_code
              lowerBoundedValue: 1

