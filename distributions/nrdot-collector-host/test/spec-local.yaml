description: nrdot-collector-host E2E Test

# scoping is achieved via an implicit attribute `testKey=${SCENARIO_TAG}` expected on all tested telemetry

scenarios:
  - description: receiver-based + internal Telemetry
    before:
      - kubectl create ns nr-${SCENARIO_TAG}
      - cp ../../../examples/internal-telemetry-config.yaml ./relay
      - kubectl create configmap 'collector-config' --from-file=relay --namespace=nr-${SCENARIO_TAG}
      - |
        kubectl create secret generic 'collector-secrets' --namespace=nr-${SCENARIO_TAG} \
        --from-literal="nrIngestKey=${LICENSE_KEY}" --from-literal="nrBackendUrl=${NR_BACKEND_URL}" \
        --from-literal="serviceName=nrdot-collector-host-e2e-internal" --from-literal="scenarioTag=${SCENARIO_TAG}"
      - "helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts || echo 'skipping repo add: open-telemetry repo already exists'"
      - |
        collector_component_version=$(cat ../manifest.yaml | grep otlpreceiver | awk '{print $NF}')
        chart_version=$(helm search repo open-telemetry/opentelemetry-collector --output=json --versions | jq -r ".[] | select (.app_version==\"${collector_component_version:1}\") | .version" | head -n1 )
        if [[ -z "${chart_version}" ]]; then
          chart_version="$(helm search repo open-telemetry/opentelemetry-collector --output=json | jq '.[0].version')"
          echo "Chart matching collector component version ${collector_component_version} wasn't released (yet?). Using latest (${chart_version}) instead."
        else
          echo "Using chart version: ${chart_version}"
        fi
        helm upgrade --install ${SCENARIO_TAG} open-telemetry/opentelemetry-collector \
        --namespace nr-${SCENARIO_TAG} --version ${chart_version} \
        --values ./collector-values-internal-telemetry.yaml \
        --set image.tag=${IMAGE_TAG} \
        --set image.repository=${IMAGE_REPO}
    after:
      - kubectl logs -l e2eTestLogSelector=nrdot-collector-host-e2e -n nr-${SCENARIO_TAG} --all-containers --prefix=true
      - kubectl get all -o wide
      - helm uninstall ${SCENARIO_TAG} --namespace nr-${SCENARIO_TAG}
      - kubectl delete namespace nr-${SCENARIO_TAG}
    tests:
      # Tests for existence of metrics
      metrics:
        - source: "expected-metrics-internal.yaml"
      # Tests for existence of signal + specific attributes
      nrqls:
        # Logs
        - query: FROM Log SELECT count(*) as logs_all
          expected_results:
            - key: logs_all
              lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), otelcol.pipeline.id is not null) as logs_pipeline
          expected_results:
              - key: logs_pipeline
                lowerBoundedValue: 1
        - query: FROM Log SELECT filter(count(*), otelcol.signal is not null) as logs_signal
          expected_results:
            - key: logs_signal
              lowerBoundedValue: 1
        # Spans
        - query: FROM Span SELECT count(*) as spans_all
          expected_results:
            - key: spans_all
              lowerBoundedValue: 1
        # Process metrics
        - query: FROM Metric SELECT filter(count(*), service.instance.id is not null) as process_instance_id WHERE metricName like 'otelcol_process_%'
          expected_results:
            - key: process_instance_id
              lowerBoundedValue: 1
        # Receiver metrics
        - query: FROM Metric SELECT filter(count(*), receiver is not null) as receiver_receiver WHERE metricName like 'otelcol_receiver_%'
          expected_results:
            - key: receiver_receiver
              lowerBoundedValue: 1
        # Processor metrics
        - query: FROM Metric SELECT filter(count(*), processor is not null) as processor_processor WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_processor
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'metrics') as processor_signal_metrics WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_metrics
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'logs') as processor_signal_logs WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_logs
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), otel.signal = 'traces') as processor_signal_traces WHERE metricName like 'otelcol_processor_%'
          expected_results:
            - key: processor_signal_traces
              lowerBoundedValue: 1
        # Exporter metrics
        - query: FROM Metric SELECT filter(count(*), exporter is not null) as exporter_exporter WHERE metricName like 'otelcol_exporter_%'
          expected_results:
            - key: exporter_exporter
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), exporter is not null) as queue_exporter WHERE metricName like 'otelcol_exporter_queue_%'
          expected_results:
            - key: queue_exporter
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), data_type is not null) as queue_type WHERE metricName like 'otelcol_exporter_queue_%'
          expected_results:
            - key: queue_type
              lowerBoundedValue: 1
        # Batch processor metrics
        - query: FROM Metric SELECT filter(count(*), processor is not null) as batch_processor WHERE metricName like 'otelcol_processor_batch_%'
          expected_results:
           - key: batch_processor
             lowerBoundedValue: 1
        # Http metrics
        - query: FROM Metric SELECT filter(count(*), server.address is not null) as http_server_address WHERE metricName like 'http.client.request.duration'
          expected_results:
            - key: http_server_address
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), server.address is not null) as http_server_address WHERE metricName like 'http.client.request.body.size'
          expected_results:
            - key: http_server_address
              lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), http.response.status_code is not null) as http_code WHERE metricName like 'http.client.request.duration'
          expected_results:
          - key: http_code
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), http.response.status_code is not null) as http_code WHERE metricName like 'http.server.request.duration'
          expected_results:
          - key: http_code
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), server.port is not null) as http_port WHERE metricName = 'http.server.request.duration'
          expected_results:
          - key: http_port
            lowerBoundedValue: 1
        - query: FROM Metric SELECT filter(count(*), rpc.grpc.status_code is not null) as rpc_code WHERE metricName like 'rpc.%.duration'
          expected_results:
            - key: rpc_code
              lowerBoundedValue: 1





